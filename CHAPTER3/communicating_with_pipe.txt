### Purpose of the Code

This code demonstrates inter-process communication (IPC) using pipes within Python's `multiprocessing` module.

#### Pipes
The `multiprocessing.Pipe` function establishes a two-way communication channel between two processes.

#### Process 1 - `create_items`
- Generates numbers from 0 to 9.
- Sends each number to the output pipe using `output_pipe.send(item)`.

#### Process 2 - `multiply_items`
- Reads numbers from the input pipe.
- Squares each number and sends the squared result to the output pipe.

#### Pipe Closing
The main process properly closes the unused ends of the pipes with `pipe_1[0].close()` and `pipe_2[0].close()` to avoid deadlocks.

#### Infinite Loop with try-except
The main process continuously reads from the pipe until it encounters an `EOFError`, which indicates that the pipe has been closed.

#### Parallelism
Two processes, `create_items` and `multiply_items`, operate in parallel, enhancing task separation.

#### Pipe Communication
- Process 1 sends data to `pipe_1`.
- Process 2 reads from `pipe_1`, processes the data, and writes the results to `pipe_2`.

#### Output
The squared values of numbers from 0 to 9 are printed in the main process.

#### End of Program
The program concludes by printing "End" when no more data is received (upon encountering `EOFError`).